@page "/server/weather"
@using DevInstance.BlazorToolkit.Model
@attribute [StreamRendering]
@inherits BasePage

@inject IStringLocalizer<WeatherStreaming> loc;

<PageTitle>@loc["Weather (Streaming)"]</PageTitle>

<h1>@loc["Weather (Streaming)"]</h1>

<p>@(new MarkupString(loc["This page demonstrates server-side stream rendering using <code>@attribute [StreamRendering]</code>"]))</p>

@if (!InProgress)
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">
                    <SortableHeader Label="@loc["Date"]"
                        SortField="WeatherForecastFields.Date"
                        IsSorted="forecasts?.SortBy.FromFieldName() == WeatherForecastFields.Date"
                        IsAsc="forecasts?.IsAsc ?? true"
                        UrlTemplate="@HeaderUrlTemplate" />
                </th>
                <th scope="col">
                    <SortableHeader Label="@loc["Temp. (C)"]"
                        SortField="WeatherForecastFields.Temperature"
                        IsSorted="forecasts?.SortBy.FromFieldName() == WeatherForecastFields.Temperature"
                        IsAsc="forecasts?.IsAsc ?? true"
                        UrlTemplate="@HeaderUrlTemplate" />
                </th>
                <th scope="col">
                    <span>@loc["Temp. (F)"]</span>
                </th>
                <th scope="col">
                    <SortableHeader Label="@loc["Summary"]"
                        SortField="WeatherForecastFields.Summary"
                        IsSorted="forecasts?.SortBy.FromFieldName() == WeatherForecastFields.Summary"
                        IsAsc="forecasts?.IsAsc ?? true"
                        UrlTemplate="@HeaderUrlTemplate" />
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts.Items)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
    <DataPager PagesCount="@forecasts.PagesCount"
    SelectedPage="@forecasts.Page"
    OnPageChanged="@RequestDataAsync"
    UrlTemplate="@PagerUrlTemplate">
    </DataPager>
}
else
{
    <PageProgress></PageProgress>
}


@code {
    [Inject]
    IWeatherForecastService Service { get; set; }

    private const int PageSize = 15;

    private ModelList<WeatherForecastItem>? forecasts;

    private IScopeLog log;

    private WeatherForecastItem selectedForecast;

    [SupplyParameterFromQuery]
    [Parameter]
    public int Page { get; set; } = 0;

    [SupplyParameterFromQuery]
    [Parameter]
    public string SortBy { get; set; } = string.Empty;

    [SupplyParameterFromQuery]
    [Parameter]
    public bool Asc { get; set; } = true;

    private string PagerUrlTemplate
    {
        get
        {
            var url = "/server/weather?page={0}";
            if (forecasts != null)
            {
                url += $"&sortby={forecasts.SortBy}&asc={forecasts.IsAsc}";
            }
            return url;
        }
    }

    private string HeaderUrlTemplate
    {
        get
        {
            var url = "/server/weather?sortby={0}&asc={1}";
            if (Page > 0)
            {
                url += $"&page={Page}";
            }
            return url;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        log = ScopeManager.CreateLogger(this);
        using (var scope = log.TraceScope())
        {
            await RequestDataAsync(Page);
            Service.OnDataUpdate += Service_OnDataUpdate;
        }
    }

    private async Task Service_OnDataUpdate(WeatherForecastItem item)
    {
        using (var scope = log.TraceScope())
        {
            await RequestDataAsync(Page);
        }
    }

    protected async Task RequestDataAsync(int page)
    {
        await ServiceCallAsync(() => Service.GetItemsAsync(PageSize, page, SortBy?.FromFieldName(), Asc, null), (a) => { forecasts = a; });
    }

    private async Task Remove(WeatherForecastItem item)
    {
        await ServiceCallAsync(() => Service.RemoveAsync(item), null, async (a) => { await RequestDataAsync(forecasts.Page); });
    }
}
